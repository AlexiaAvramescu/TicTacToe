// Mocks generated by Mockito 5.4.2 from annotations
// in tic_tac_toe_ui/test/game_cubit_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'package:mockito/mockito.dart' as _i1;
import 'package:tic_tac_toe_lib/src/game_api/igame.dart' as _i2;
import 'package:tic_tac_toe_lib/src/game_api/istrategy.dart' as _i3;
import 'package:tic_tac_toe_lib/src/game_api/position.dart' as _i5;
import 'package:tic_tac_toe_lib/src/listener.dart' as _i4;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

/// A class which mocks [IGame].
///
/// See the documentation for Mockito's code generation for more information.
class MockIGame extends _i1.Mock implements _i2.IGame {
  @override
  _i2.EMark get turn => (super.noSuchMethod(
        Invocation.getter(#turn),
        returnValue: _i2.EMark.X,
        returnValueForMissingStub: _i2.EMark.X,
      ) as _i2.EMark);
  @override
  _i2.EGameState get state => (super.noSuchMethod(
        Invocation.getter(#state),
        returnValue: _i2.EGameState.strategyNotSet,
        returnValueForMissingStub: _i2.EGameState.strategyNotSet,
      ) as _i2.EGameState);
  @override
  bool get isOver => (super.noSuchMethod(
        Invocation.getter(#isOver),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);
  @override
  List<List<_i2.EMark>> get board => (super.noSuchMethod(
        Invocation.getter(#board),
        returnValue: <List<_i2.EMark>>[],
        returnValueForMissingStub: <List<_i2.EMark>>[],
      ) as List<List<_i2.EMark>>);
  @override
  set strategy(_i3.EStrategy? val) => super.noSuchMethod(
        Invocation.setter(
          #strategy,
          val,
        ),
        returnValueForMissingStub: null,
      );
  @override
  void addListener(_i4.IListener? listener) => super.noSuchMethod(
        Invocation.method(
          #addListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void removeListener(_i4.IListener? listener) => super.noSuchMethod(
        Invocation.method(
          #removeListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void restart() => super.noSuchMethod(
        Invocation.method(
          #restart,
          [],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void makeMove(_i5.Position? pos) => super.noSuchMethod(
        Invocation.method(
          #makeMove,
          [pos],
        ),
        returnValueForMissingStub: null,
      );
}
